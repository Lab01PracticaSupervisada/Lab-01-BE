name: CD â†’ Staging (AKS)

on:
  push:
    branches:
      - staging
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. Login to Azure using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 2. Login to Azure Container Registry
      - name: Azure Container Registry login (OIDC)
        run: |
          TOKEN=$(az acr login --name ${{ secrets.ACR_NAME }} --expose-token --output tsv --query accessToken)
          echo $TOKEN | docker login ${{ secrets.ACR_NAME }}.azurecr.io \
            --username 00000000-0000-0000-0000-000000000000 \
            --password-stdin


      # 3. Build and push image to ACR
      - name: Build and push image to ACR
        run: |
          IMAGE_TAG=${{ secrets.ACR_NAME }}.azurecr.io/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
          docker build -f lab-be.dockerfile -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Install kubelogin
      - name: Install kubelogin
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
          chmod +x /usr/local/bin/kubelogin

      # 4. Get AKS credentials    
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --name ${{ secrets.AKS_NAME }} \
            --overwrite-existing \
            --resource-group ${{ secrets.RESOURCE_GROUP }}

      # Convert kubeconfig for OIDC
      - name: Convert kubeconfig for OIDC
        run: kubelogin convert-kubeconfig -l azurecli

      # 5. Deploy to AKS
      - name: Deploy to AKS
        run: |
          # Replace placeholder and apply manifests
          sed "s|PLACEHOLDER_IMAGE|${{ env.IMAGE_TAG }}|" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl rollout status deployment/lab-be
